<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example.rancher</groupId>
    <artifactId>rencher</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>rencher</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>handsome</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <!--<defaultLibBundleDir>lib</defaultLibBundleDir>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.33.0</version>
                <configuration>
                    <!--配置远程docker守护进程url-->
                    <dockerHost>tcp://harbor.zlr.net.my:2375</dockerHost>
                    <!--认证配置,用于私有registry认证-->
                    <authConfig>
                        <username>admin</username>
                        <password>Harbor12345</password>
                    </authConfig>
                    <!--镜像相关配置,支持多镜像-->
                    <images>
                        <!-- 单个镜像配置 -->
                        <image>
                            <!--镜像名(含版本号)-->
                            <name>harbor.zlr.net.my:8082/application/rencher:${project.version}</name>
                            <!--registry地址,用于推送,拉取镜像-->
                            <registry>harbor.zlr.net.my:8082</registry>
                            <!--镜像build相关配置-->
                            <!--                            <build>-->
                            <!--                                &lt;!&ndash;使用dockerFile文件&ndash;&gt;-->
                            <!--                                <dockerFile>${project.basedir}/Dockerfile</dockerFile>-->
                            <!--                            </build>-->
                            <build>
                                <from>harbor.zlr.net.my:8082/public/java:8</from>
<!--                                <workdir>/maven</workdir>-->
                                <assembly>
                                    <!--                                    <targetDir>/maven/test-1.0.0.jar</targetDir>-->
                                    <descriptorRef>artifact-with-dependencies</descriptorRef>
                                </assembly>
                                <tags>
                                    <tag>${project.version}</tag>
                                    <tag>latest</tag>
                                </tags>
                                <entryPoint>
                                    <exec>
                                        <arg>java</arg>
                                        <arg>-Djava.security.egd=file:/dev/./urandom</arg>
                                        <arg>-jar</arg>
                                        <arg>/maven/${project.build.finalName}.jar</arg>
                                        <arg>-Xmx1024m -Xms1024m -Xmn512m</arg>
                                    </exec>
                                </entryPoint>

                                <!--                                <healthCheck>-->
                                <!--                                    <interval>5m</interval>-->
                                <!--                                    <timeout>60s</timeout>-->
                                <!--                                    <startPeriod>20m</startPeriod>-->
                                <!--                                    <retries>3</retries>-->
                                <!--                                    <cmd>curl -f http://localhost:${server.port}/actuator/health || exit 1</cmd>-->
                                <!--                                </healthCheck>-->
                            </build>
                        </image>
                    </images>
                </configuration>

                <!-- Connect start/stop to pre- and
                     post-integration-test phase, respectively if you want to start
                     your docker containers during integration tests -->
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <!-- "build" should be used to create the images with the
                                 artifact -->
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>docker-push</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
